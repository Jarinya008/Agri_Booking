import 'package:flutter/material.dart';

class QueueCarScreen extends StatefulWidget {
  @override
  _QueueCarScreenState createState() => _QueueCarScreenState();
}

class _QueueCarScreenState extends State<QueueCarScreen> {
  TextEditingController nameController = TextEditingController();
  TextEditingController areaController = TextEditingController();
  TextEditingController detailsController = TextEditingController();

  DateTime startDate = DateTime.now();
  DateTime endDate = DateTime.now();
  TimeOfDay startTime = const TimeOfDay(hour: 9, minute: 0);
  TimeOfDay endTime = const TimeOfDay(hour: 9, minute: 0);

  String selectedAddress =
      "‡∏ó‡∏µ‡πà‡∏ô‡∏≤ 1 250/5 ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏î‡∏µ ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏¥‡∏î‡∏™‡∏ß‡∏ô‡∏•‡∏≥‡πÑ‡∏¢‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡∏µ \n‡∏ï‡∏≥‡∏ö‡∏•‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ó‡πà‡∏ô ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏ó‡πà‡∏ô ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥";

  Future<void> _selectDate(BuildContext context, bool isStart) async {
    DateTime? picked = await showDatePicker(
      context: context,
      initialDate: isStart ? startDate : endDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2100),
    );
    if (picked != null) {
      setState(() {
        if (isStart) {
          startDate = picked;
        } else {
          endDate = picked;
        }
      });
    }
  }

  Future<void> _selectTime(BuildContext context, bool isStart) async {
    TimeOfDay? picked = await showTimePicker(
      context: context,
      initialTime: isStart ? startTime : endTime,
    );
    if (picked != null) {
      setState(() {
        if (isStart) {
          startTime = picked;
        } else {
          endTime = picked;
        }
      });
    }
  }

  void _navigateToSelectLocation() async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => SelectLocationScreen()),
    );
    if (result != null) {
      setState(() {
        selectedAddress = result;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏£‡∏ñ"),
        backgroundColor: Colors.amber, // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text("üöú ‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡πâ‡∏≠‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡∏£‡∏∏‡πà‡∏ô CH570"),
              const Text("üìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: ‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏≠‡πâ‡∏≠‡∏¢"),
              const Text("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤ 150 ‡∏ö‡∏≤‡∏ó/‡πÑ‡∏£‡πà"),
              const SizedBox(height: 10),
              TextField(
                controller: nameController,
                decoration: const InputDecoration(labelText: "‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô"),
              ),
              TextField(
                controller: areaController,
                decoration:
                    const InputDecoration(labelText: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"),
              ),
              TextField(
                controller: detailsController,
                decoration: const InputDecoration(labelText: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô"),
              ),
              const SizedBox(height: 10),
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text("üìÖ ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°"),
                        InkWell(
                          onTap: () => _selectDate(context, true),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                                border: OutlineInputBorder()),
                            child: Text("${startDate.toLocal()}".split(' ')[0]),
                          ),
                        ),
                        InkWell(
                          onTap: () => _selectTime(context, true),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                                border: OutlineInputBorder()),
                            child: Text(startTime.format(context)),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text("üìÖ ‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î"),
                        InkWell(
                          onTap: () => _selectDate(context, false),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                                border: OutlineInputBorder()),
                            child: Text("${endDate.toLocal()}".split(' ')[0]),
                          ),
                        ),
                        InkWell(
                          onTap: () => _selectTime(context, false),
                          child: InputDecorator(
                            decoration: const InputDecoration(
                                border: OutlineInputBorder()),
                            child: Text(endTime.format(context)),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 10),
              Container(
                decoration: BoxDecoration(
                  color: Color.fromARGB(255, 255, 211, 80),
                  borderRadius: BorderRadius.circular(10),
                ),
                child: ListTile(
                  leading: const Icon(Icons.location_on, color: Colors.black54),
                  title: const Text("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢",
                      style: TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Text(selectedAddress),
                  trailing:
                      const Icon(Icons.arrow_forward, color: Colors.black54),
                  onTap: _navigateToSelectLocation,
                ),
              ),
              const SizedBox(height: 20),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  },
                  child: const Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô"),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(
                        horizontal: 50, vertical: 15),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
class SelectLocationScreen extends StatelessWidget {
  final List<String> locations = [
    "üöú ‡πÑ‡∏£‡πà‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î ‡∏ö‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡∏≠‡∏á‡πÅ‡∏ß‡∏á",
    "üå≥ ‡∏™‡∏ß‡∏ô‡∏•‡∏≥‡πÑ‡∏¢ ‡∏ö‡πâ‡∏≤‡∏ô‡∏ô‡∏≤‡∏™‡∏≤‡∏£",
    "üè° ‡∏ö‡πâ‡∏≤‡∏ô‡∏™‡∏ß‡∏ô ‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
    "üåæ ‡πÑ‡∏£‡πà‡∏Ç‡πâ‡∏≤‡∏ß ‡∏ö‡πâ‡∏≤‡∏ô‡∏î‡∏≠‡∏ô‡∏Ñ‡∏≤"
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")),
      body: ListView.builder(
        itemCount: locations.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(locations[index]),
            onTap: () {
              Navigator.pop(context, locations[index]); // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö
            },
          );
        },
      ),
    );
  }
}
